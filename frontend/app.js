
// Configuration 
const API_BASE_URL = 'https://flask-story-app.onrender.com';

const form = document.getElementById('storyForm');
const result = document.getElementById('result');
const generateBtn = document.getElementById('generateBtn');
const btnText = document.querySelector('.btn-text');
const loading = document.getElementById('loading');
const successContent = document.getElementById('success-content');
const errorContent = document.getElementById('error-content');
const audioPlayer = document.getElementById('audioPlayer');
const storyText = document.getElementById('storyText');
const errorMessage = document.getElementById('errorMessage');

form.addEventListener('submit', async (e) => {
e.preventDefault();

const formData = new FormData(form);
const data = {
   city: formData.get('city').trim(),
   mood: formData.get('mood'),
   language: formData.get('language')
};

// Show loading state
generateBtn.disabled = true;
generateBtn.classList.add('btn-loading');
btnText.textContent = 'Generating...';

result.style.display = 'block';
result.className = 'result';
loading.style.display = 'block';
successContent.style.display = 'none';
errorContent.style.display = 'none';

console.log('Request data:', data);

try {
   let response;
   let responseData;
   let isFromAI = false;

   console.log('Trying pre-written stories...');
   btnText.textContent = 'Checking pre-written stories...';
   
   response = await fetch(`${API_BASE_URL}/generate-story`, {
       method: 'POST',
       headers: {
           'Content-Type': 'application/json',
       },
       body: JSON.stringify(data)
   });

   responseData = await response.json();
   console.log('Pre-written response:', responseData);

   if (!response.ok || !responseData.success) {
       console.log('No pre-written story found, using Groq AI...');
       btnText.textContent = 'Generating with AI...';
       isFromAI = true;

       // Add AI-specific parameters
       const aiData = {
           ...data,
           length: 'medium',
           include_audio: true
       };

       response = await fetch(`${API_BASE_URL}/generate-dynamic-story`, {
           method: 'POST',
           headers: {
               'Content-Type': 'application/json',
           },
           body: JSON.stringify(aiData)
       });

       responseData = await response.json();
       console.log('AI response:', responseData);
   }

   if (response.ok && responseData.success) {
       // Success
       result.classList.add('success');
       loading.style.display = 'none';
       successContent.style.display = 'block';

       // Set up audio player
       if (responseData.audio_url) {
           audioPlayer.src = responseData.audio_url;
           audioPlayer.style.display = 'block';
       }

       // Showing story text with source indicator
       const sourceText = isFromAI ? ' (AI Generated)' : ' (Curated)';
       storyText.innerHTML = `
           <div style="margin-bottom: 10px; font-size: 0.9em; color: rgba(255,255,255,0.8); font-style: italic;">
               ${isFromAI ? 'ðŸ¤– Generated by AI' : 'ðŸ“š Curated Story'}
           </div>
           ${responseData.story_text}
       `;
       storyText.style.display = 'block';

       // Success message with different styling based on source
       btnText.textContent = isFromAI ? 'âœ¨ AI Story Generated!' : 'âœ¨ Story Generated!';

   } else {
       // Both endpoints failed
       throw new Error(responseData.error || 'Failed to generate story from both sources');
   }

} catch (error) {
   console.error('Error details:', error);
   result.classList.add('error');
   loading.style.display = 'none';
   errorContent.style.display = 'block';

   // More detailed error message
   if (error.name === 'TypeError' && error.message.includes('fetch')) {
       errorMessage.textContent = 'Network error: Unable to connect to the server. Please check your internet connection.';
   } else if (error.message.includes('Groq API')) {
       errorMessage.textContent = 'AI service is temporarily unavailable. Please try again later.';
   } else {
       errorMessage.textContent = error.message || 'Network error. Please check if the backend is running.';
   }
} finally {
   // Reset button state
   generateBtn.disabled = false;
   generateBtn.classList.remove('btn-loading');

   setTimeout(() => {
       if (!btnText.textContent.includes('Error')) {
           btnText.textContent = 'âœ¨ Generate Story Audio';
       }
   }, 3000);
}
});

// Enhanced interactive effects
const inputs = document.querySelectorAll('.form-control');
inputs.forEach(input => {
input.addEventListener('focus', function () {
   this.style.transform = 'translateY(-3px)';
});

input.addEventListener('blur', function () {
   this.style.transform = 'translateY(0)';
});

// Add floating label effect
input.addEventListener('input', function() {
   if (this.value) {
       this.style.borderColor = 'rgba(255, 153, 51, 0.8)';
       this.style.background = 'rgba(255, 255, 255, 0.3)';
   } else {
       this.style.borderColor = 'rgba(255, 255, 255, 0.3)';
       this.style.background = 'rgba(255, 255, 255, 0.2)';
   }
});
});

// Initialize particles with random positions and delays
const particles = document.querySelectorAll('.particle');
particles.forEach((particle, index) => {
particle.style.left = Math.random() * 100 + '%';
particle.style.animationDelay = Math.random() * 20 + 's';
particle.style.animationDuration = (15 + Math.random() * 10) + 's';
});

// Wake up backend
window.addEventListener("load", () => {
fetch("https://flask-story-app.onrender.com/ping")
   .then(() => console.log("Backend awake!"))
   .catch(() => console.warn("Backend is still sleeping..."));
});

// Smooth scroll behavior
document.documentElement.style.scrollBehavior = 'smooth';

// Keyboard navigation support
document.addEventListener('keydown', (e) => {
if (e.key === 'Enter' && e.target.tagName === 'BUTTON') {
   e.target.click();
}
});